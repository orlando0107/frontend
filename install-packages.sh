#!/bin/bash
#'postgres://postgres:password@localhost:5432/postgres'
DB_NAME="postgresql"
DB_USER="postgresql"
DB_PASSWORD="postgresql"
ENV_FILE=".env"

echo "üñ• Detectando sistema operativo..."
OS=$(uname -s)

if [ "$OS" != "Linux" ]; then
    echo "‚ùå Este script solo es compatible con Linux."
    exit 1
fi

echo "‚úÖ Sistema operativo: Linux"

# Funci√≥n para verificar si un comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# 1Ô∏è‚É£ Verificar e instalar npm
if command_exists npm; then
    echo "‚úÖ npm ya est√° instalado."
else
    echo "üì¶ npm no est√° instalado. Instalando..."
    sudo apt update && sudo apt install -y npm
fi

# 2Ô∏è‚É£ Verificar e instalar pnpm
if command_exists pnpm; then
    echo "‚úÖ pnpm ya est√° instalado."
else
    echo "üì¶ pnpm no est√° instalado. Instalando..."
    npm install -g pnpm
    pnpm setup
    echo "üîÑ Reinicia la terminal si hay problemas con pnpm."
fi

# üîÑ Asegurar que PNPM_HOME est√© en el PATH
export PNPM_HOME="$HOME/.local/share/pnpm"
export PATH="$PNPM_HOME/bin:$PATH"
echo "üîß Configurando PNPM_HOME en PATH..."
echo 'export PNPM_HOME="$HOME/.local/share/pnpm"' >> ~/.bashrc
echo 'export PATH="$PNPM_HOME/$PATH"' >> ~/.bashrc
source ~/.bashrc

# 3Ô∏è‚É£ Verificar e instalar turbo
if npm list -g | grep -q "turbo"; then
    echo "‚úÖ turbo ya est√° instalado."
else
    echo "üöÄ turbo no est√° instalado. Instalando..."
    npm install turbo --global
fi

# 4Ô∏è‚É£ Verificar que turbo est√° accesible
if command_exists turbo; then
    echo "‚úÖ turbo instalado correctamente: $(turbo --version)"
else
    echo "‚ùå turbo no se encontr√≥ en el PATH. Intenta reiniciar la terminal."
fi

echo "üéâ Instalaci√≥n completada. üöÄ"

# 5Ô∏è‚É£ Verificar e instalar PostgreSQL
if command_exists psql; then
    echo "‚úÖ PostgreSQL ya est√° instalado: $(psql --version)"
else
    echo "üêò PostgreSQL no est√° instalado. Instalando..."
    sudo apt update
    sudo apt install -y postgresql postgresql-contrib
    echo "‚úÖ PostgreSQL instalado correctamente."
fi

# 6Ô∏è‚É£ Verificar si el servicio PostgreSQL est√° corriendo
echo "üîÑ Verificando estado de PostgreSQL..."
sudo systemctl enable --now postgresql
sudo systemctl status postgresql --no-pager

echo "üéâ Instalaci√≥n completada. üöÄ"

# 2Ô∏è‚É£ Verificar si el servicio PostgreSQL est√° corriendo
echo "üîÑ Verificando estado de PostgreSQL..."
sudo systemctl enable --now postgresql
sudo systemctl status postgresql --no-pager

# 3Ô∏è‚É£ Crear base de datos y usuario si no existen
echo "üõ† Creando base de datos y usuario..."

# Crear la base de datos si no existe
sudo -u postgres psql -c "SELECT 1 FROM pg_database WHERE datname = '$DB_NAME'" | grep -q 1 || sudo -u postgres psql -c "CREATE DATABASE $DB_NAME"

# Crear el usuario si no existe
sudo -u postgres psql -c "DO \$\$ BEGIN
   IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$DB_USER') THEN
      CREATE USER $DB_USER WITH PASSWORD '$DB_PASSWORD';
      GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;
      ALTER USER $DB_USER CREATEDB;
      RAISE NOTICE 'Usuario $DB_USER creado con permisos.';
   ELSE
      RAISE NOTICE 'El usuario $DB_USER ya existe.';
   END IF;
END \$\$;"

# üî• Agregar permisos al esquema public
sudo -u postgres psql -d $DB_NAME -c "GRANT ALL ON SCHEMA public TO $DB_USER;"
sudo -u postgres psql -d $DB_NAME -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO $DB_USER;"
sudo -u postgres psql -d $DB_NAME -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO $DB_USER;"
sudo -u postgres psql -d $DB_NAME -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO $DB_USER;"


echo "‚úÖ Base de datos y usuario configurados correctamente."


# 4Ô∏è‚É£ Guardar credenciales en .env
echo "üìù Guardando credenciales en $ENV_FILE..."
cat <<EOT > $ENV_FILE
DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/$DB_NAME
EOT

echo "‚úÖ Archivo $ENV_FILE generado con √©xito."

echo "üéâ Instalaci√≥n completada. üöÄ"